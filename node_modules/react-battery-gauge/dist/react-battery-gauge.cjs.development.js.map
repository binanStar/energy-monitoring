{"version":3,"file":"react-battery-gauge.cjs.development.js","sources":["../src/lib/constants/index.ts","../src/lib/store/context.ts","../src/lib/hooks/useGaugeContext.ts","../src/lib/hooks/useBatteryDimensions.ts","../src/lib/components/Battery/index.tsx","../src/lib/store/Provider.tsx","../src/lib/Canvas.tsx","../src/lib/hooks/useLevelDimensions.ts","../src/lib/utils/index.ts","../src/lib/components/BatteryLevel.tsx","../src/lib/components/ReadingText.tsx","../src/lib/hooks/useCounterAnimation.ts","../src/lib/hooks/useClipPathHash.ts","../src/lib/components/Charging.tsx","../src/index.tsx"],"sourcesContent":["export const CANVAS_WIDTH = 100;\nconst CANVAS_HEIGHT = 52;\n\nexport const BATTERY_ASPECT_RATIO = CANVAS_HEIGHT / CANVAS_WIDTH; // battery is horizontal\nexport const BATTERY_BODY = 'batteryBody';\nexport const BATTERY_CAP = 'batteryCap';\nexport const BATTERY_METER = 'batteryMeter';\nexport const READING_TEXT = 'readingText';\nexport const CHARGING_FLASH = 'chargingFlash';\n\n// clipPath ids\nexport const CLIP_METER = 'clip_level_meter';\nexport const CLIP_METER_FILLED = 'clip_level_meter_filled';\nexport const CLIP_METER_EMPTY = 'clip_level_meter_empty';\nexport const CLIP_CAP = 'battery_cap_clip';\n","import { BATTERY_ASPECT_RATIO, CANVAS_WIDTH } from './../constants/index';\nimport { createContext } from 'react';\nimport type { TGaugeCanvas } from '../../typings';\n\nexport const defaultState = {\n  canvasWidth: CANVAS_WIDTH,\n  canvasHeight: CANVAS_WIDTH * BATTERY_ASPECT_RATIO,\n  aspectRatio: BATTERY_ASPECT_RATIO,\n  padding: 0,\n  value: 50,\n  maxValue: 100,\n  clipPathHash: '',\n  orientation: 'horizontal' as TGaugeCanvas['orientation'],\n  animated: false,\n  charging: false,\n  customization: {\n    batteryBody: {\n      strokeWidth: 4,\n      cornerRadius: 6,\n      fill: 'none',\n      strokeColor: '#111',\n    },\n    batteryCap: {\n      fill: 'none',\n      strokeWidth: 4,\n      strokeColor: '#111',\n      cornerRadius: 2,\n      capToBodyRatio: 0.4,\n    },\n    batteryMeter: {\n      fill: 'green',\n      lowBatteryValue: 15,\n      lowBatteryFill: 'red',\n      outerGap: 1,\n      noOfCells: 1,\n      interCellsGap: 1,\n    },\n    readingText: {\n      lightContrastColor: '#111',\n      darkContrastColor: '#fff',\n      lowBatteryColor: 'red',\n      fontFamily: 'Helvetica',\n      fontSize: 14,\n      showPercentage: true,\n    },\n    chargingFlash: {\n      scale: undefined,\n      fill: 'orange',\n      animated: true,\n      animationDuration: 1000,\n    },\n  },\n};\n\nexport const Context = createContext<TGaugeCanvas>(defaultState);\n","import { ContextType, useContext } from 'react';\nimport { Context } from '../store/context';\n\nexport function useGaugeContext() {\n  return useContext(Context);\n}\n\nexport type UseGaugeContextReturnValue = ContextType<typeof Context>;\n","import { useGaugeContext } from './useGaugeContext';\n\nexport const useBatteryDimensions = (batteryCapRatio: number) => {\n  const { canvasHeight, canvasWidth, padding } = useGaugeContext();\n  const objectHeight = canvasHeight - 2 * padding; // total canvas height minus vertical padding\n  const capHeight = objectHeight * batteryCapRatio;\n  const capWidth = capHeight / 2;\n\n  return {\n    bodyWidth: canvasWidth - capWidth - 2 * padding,\n    bodyHeight: canvasHeight - 2 * padding,\n    capWidth,\n    capHeight,\n  };\n};\n","import React from 'react';\nimport { BATTERY_BODY, BATTERY_CAP, CLIP_CAP } from '../../constants';\nimport { useBatteryDimensions } from '../../hooks/useBatteryDimensions';\nimport { useGaugeContext } from '../../hooks/useGaugeContext';\n\nexport const Battery = () => {\n  const {\n    canvasWidth,\n    canvasHeight,\n    padding,\n    customization,\n    clipPathHash,\n  } = useGaugeContext();\n\n  const {\n    strokeColor: bodyStrokeColor,\n    strokeWidth: bodyStrokeWidth,\n    fill: bodyFill,\n    cornerRadius: bodyCornerRadius,\n  } = customization[BATTERY_BODY];\n\n  const {\n    strokeColor: capStrokeColor,\n    strokeWidth: capStrokeWidth,\n    fill: capFill,\n    cornerRadius: capCornerRadius,\n    capToBodyRatio,\n  } = customization[BATTERY_CAP];\n\n  const { bodyWidth, bodyHeight, capWidth, capHeight } = useBatteryDimensions(\n    capToBodyRatio\n  );\n  return (\n    <g>\n      <defs>\n        <clipPath id={CLIP_CAP + clipPathHash}>\n          <rect\n            x={canvasWidth - padding - capWidth}\n            y={(canvasHeight - capHeight - capStrokeWidth) / 2}\n            width={capWidth}\n            height={capHeight + capStrokeWidth}\n            strokeWidth={capStrokeWidth}\n          />\n        </clipPath>\n      </defs>\n      <rect\n        className={BATTERY_BODY}\n        x={padding}\n        y={padding}\n        rx={bodyCornerRadius}\n        ry={bodyCornerRadius}\n        width={bodyWidth}\n        height={bodyHeight}\n        strokeWidth={bodyStrokeWidth}\n        fill={bodyFill}\n        stroke={bodyStrokeColor}\n      />\n      <rect\n        clipPath={`url(#${CLIP_CAP + clipPathHash})`}\n        className={BATTERY_CAP}\n        x={canvasWidth - padding - capWidth - capCornerRadius}\n        y={(canvasHeight - capHeight) / 2}\n        rx={capCornerRadius}\n        ry={capCornerRadius}\n        width={capWidth}\n        height={capHeight}\n        strokeWidth={capStrokeWidth}\n        fill={capFill}\n        stroke={capStrokeColor}\n      />\n    </g>\n  );\n};\n","import React, { FC } from 'react';\nimport type { TGaugeCanvas } from '../../typings';\nimport { Context } from './context';\n\ninterface Props {\n  value: TGaugeCanvas & { clipPathHash: string };\n}\n\nexport const CanvasProvider: FC<Props> = ({ children, value }) => {\n  return <Context.Provider value={value}>{children}</Context.Provider>;\n};\n","import React from 'react';\nimport { TGaugeCanvas } from '../typings';\nimport { CanvasProvider } from './store/Provider';\n\nexport interface TCanvasProps\n  extends Omit<React.SVGProps<SVGSVGElement>, 'orientation'>,\n    TGaugeCanvas {}\n\nexport const Canvas = (props: TCanvasProps) => {\n  const {\n    children,\n    canvasWidth,\n    canvasHeight,\n    padding,\n    value,\n    maxValue,\n    orientation,\n    customization,\n    clipPathHash,\n    ...otherSvgProps\n  } = props;\n  return (\n    <CanvasProvider\n      value={{\n        canvasWidth,\n        canvasHeight,\n        padding,\n        value,\n        maxValue,\n        orientation,\n        customization,\n        clipPathHash,\n      }}\n    >\n      <svg viewBox={`0 0 ${canvasWidth} ${canvasHeight}`} {...otherSvgProps}>\n        {children}\n      </svg>\n    </CanvasProvider>\n  );\n};\n","import { BATTERY_CAP, BATTERY_METER, BATTERY_BODY } from './../constants/index';\nimport { useMemo } from 'react';\nimport { useBatteryDimensions } from './useBatteryDimensions';\nimport { useGaugeContext } from './useGaugeContext';\n\nexport const useLevelDimensions = () => {\n  const { padding, customization } = useGaugeContext();\n  const { strokeWidth } = customization[BATTERY_BODY];\n  const { capToBodyRatio } = customization[BATTERY_CAP];\n  const { outerGap } = customization[BATTERY_METER];\n  const { bodyWidth, bodyHeight } = useBatteryDimensions(capToBodyRatio);\n\n  return useMemo(() => {\n    const innerBodyWidth = bodyWidth - strokeWidth;\n    const innerBodyHeight = bodyHeight - strokeWidth;\n    return {\n      x: padding + strokeWidth / 2 + outerGap,\n      y: padding + strokeWidth / 2 + outerGap,\n      width: innerBodyWidth - 2 * outerGap,\n      height: innerBodyHeight - 2 * outerGap,\n    };\n  }, [bodyWidth, bodyHeight, outerGap, padding, strokeWidth]);\n};\n","export function getValueInPercentage(value: number, maxValue: number) {\n  return Math.round((value / maxValue) * 100);\n}\n\nexport function checkLowBattery(value: number, lowBatteryValue: number) {\n  return value < lowBatteryValue;\n}\n\nexport function getVisibleCellsCount(\n  value: number,\n  maxValue: number,\n  noOfCells: number\n) {\n  return Math.floor(Math.abs(value / maxValue) * noOfCells);\n}\nexport const timing = (progress: number, easing?: 'linear') => {\n  if (easing === 'linear') {\n    return progress;\n  }\n  return progress;\n};\n","import React, { useMemo } from 'react';\nimport {\n  BATTERY_BODY,\n  BATTERY_METER,\n  CLIP_METER,\n  CLIP_METER_FILLED,\n} from '../constants';\nimport { useGaugeContext } from '../hooks/useGaugeContext';\nimport { useLevelDimensions } from '../hooks/useLevelDimensions';\nimport { checkLowBattery, getVisibleCellsCount } from '../utils';\n\nexport const BatteryLevel = () => {\n  const { value, maxValue, customization, clipPathHash } = useGaugeContext();\n  const { x, y, width, height } = useLevelDimensions();\n  const {\n    fill,\n    lowBatteryFill,\n    gradFill,\n    lowBatteryValue,\n    outerGap,\n    noOfCells,\n    interCellsGap,\n  } = customization[BATTERY_METER];\n  const {\n    strokeWidth: bodyStrokeWidth,\n    cornerRadius: bodyCornerRadius,\n  } = customization[BATTERY_BODY];\n\n  const cellList = useMemo(() => {\n    const noOfVisibleCells = getVisibleCellsCount(value, maxValue, noOfCells);\n    if (noOfVisibleCells === 0 && value > 0) {\n      return ['cell'];\n    }\n    return new Array(noOfVisibleCells).fill('cell');\n  }, [value, maxValue, noOfCells]);\n\n  return (\n    <g>\n      <defs>\n        <clipPath id={CLIP_METER + clipPathHash}>\n          <rect\n            x={x}\n            y={y}\n            rx={bodyCornerRadius - bodyStrokeWidth / 2 - outerGap}\n            ry={bodyCornerRadius - bodyStrokeWidth / 2 - outerGap}\n            width={width}\n            height={height}\n          />\n        </clipPath>\n        {noOfCells < 2 && gradFill && (\n          <linearGradient id={'levelGradient' + clipPathHash}>\n            {gradFill.map((item) => {\n              return (\n                <stop\n                  key={item.color}\n                  offset={item.offset + '%'}\n                  stopColor={item.color}\n                />\n              );\n            })}\n          </linearGradient>\n        )}\n      </defs>\n      {noOfCells === 1 && (\n        <g>\n          {gradFill ? (\n            <rect\n              className={BATTERY_METER}\n              clipPath={`url(#${CLIP_METER_FILLED + clipPathHash})`}\n              x={x}\n              y={y}\n              width={width}\n              height={height}\n              fill={`url(#levelGradient${clipPathHash})`}\n            />\n          ) : (\n            <rect\n              className={BATTERY_METER}\n              clipPath={`url(#${CLIP_METER + clipPathHash})`}\n              x={x}\n              y={y}\n              width={(width * value) / maxValue}\n              height={height}\n              fill={\n                checkLowBattery(value, lowBatteryValue) ? lowBatteryFill : fill\n              }\n            />\n          )}\n        </g>\n      )}\n      <g>\n        {noOfCells > 1 &&\n          cellList.map((_item, index) => {\n            return (\n              <rect\n                key={index}\n                className={BATTERY_METER}\n                clipPath={`url(#${CLIP_METER + clipPathHash})`}\n                x={x + ((width + interCellsGap) / noOfCells) * index}\n                y={y}\n                width={width / noOfCells - interCellsGap}\n                height={height}\n                fill={\n                  checkLowBattery(value, lowBatteryValue)\n                    ? lowBatteryFill\n                    : fill\n                }\n              />\n            );\n          })}\n      </g>\n    </g>\n  );\n};\n","import React from 'react';\nimport {\n  BATTERY_METER,\n  CLIP_METER,\n  CLIP_METER_EMPTY,\n  CLIP_METER_FILLED,\n  READING_TEXT,\n} from '../constants';\nimport { useGaugeContext } from '../hooks/useGaugeContext';\nimport { useLevelDimensions } from '../hooks/useLevelDimensions';\nimport {\n  checkLowBattery,\n  getValueInPercentage,\n  getVisibleCellsCount,\n} from '../utils';\nimport type { FormatValue } from '../../typings';\n\ntype ReadingTextProps = {\n  formatValue: FormatValue;\n};\nexport const ReadingText = (props: ReadingTextProps) => {\n  const { formatValue } = props;\n  const {\n    value,\n    maxValue,\n    orientation,\n    customization,\n    clipPathHash,\n  } = useGaugeContext();\n  const { x, y, width, height } = useLevelDimensions();\n  const {\n    fontFamily,\n    darkContrastColor,\n    lightContrastColor,\n    lowBatteryColor,\n    showPercentage,\n    fontSize,\n    ...otherTextProps\n  } = customization[READING_TEXT];\n  const { lowBatteryValue, noOfCells, interCellsGap } = customization[\n    BATTERY_METER\n  ];\n  const percentageSign = showPercentage ? '%' : '';\n  const valueRatio = value / maxValue;\n  const isCellTypeBattery = noOfCells > 1;\n  const noOfVisibleCells = getVisibleCellsCount(value, maxValue, noOfCells);\n  const noOfInvisibleCells = noOfCells - noOfVisibleCells;\n  const widthPerCell = width / noOfCells;\n  const readingValue = getValueInPercentage(value, maxValue);\n\n  const renderTextElement = (contrastColor: string, clipPathId: string) => {\n    return (\n      <text\n        className={READING_TEXT}\n        x={x + width / 2}\n        y={y + height / 2}\n        dominantBaseline=\"middle\"\n        textAnchor=\"middle\"\n        clipPath={`url(#${clipPathId})`}\n        fill={\n          checkLowBattery(value, lowBatteryValue)\n            ? lowBatteryColor\n            : contrastColor\n        }\n        fontFamily={fontFamily}\n        fontWeight=\"bold\"\n        fontSize={fontSize}\n        writingMode={orientation === 'vertical' ? 'tb' : 'lr'}\n        {...otherTextProps}\n      >\n        {formatValue(readingValue) + percentageSign}\n      </text>\n    );\n  };\n\n  return (\n    <g>\n      <defs>\n        <clipPath id={CLIP_METER_FILLED + clipPathHash}>\n          <rect\n            x={x}\n            y={y}\n            width={\n              isCellTypeBattery\n                ? widthPerCell * noOfVisibleCells - interCellsGap / 2\n                : width * valueRatio\n            }\n            height={height}\n            clipPath={`url(#${CLIP_METER + clipPathHash})`}\n          />\n        </clipPath>\n        <clipPath id={CLIP_METER_EMPTY + clipPathHash}>\n          <rect\n            x={\n              x +\n              (isCellTypeBattery\n                ? widthPerCell * noOfVisibleCells - interCellsGap / 2\n                : width * valueRatio)\n            }\n            y={y}\n            width={\n              isCellTypeBattery\n                ? widthPerCell * noOfInvisibleCells\n                : width * (1 - valueRatio)\n            }\n            height={height}\n            clipPath={`url(#${CLIP_METER + clipPathHash})`}\n          />\n        </clipPath>\n      </defs>\n      {renderTextElement(darkContrastColor, CLIP_METER_FILLED + clipPathHash)}\n      {renderTextElement(lightContrastColor, CLIP_METER_EMPTY + clipPathHash)}\n    </g>\n  );\n};\n","import { useEffect, useState, useCallback, useRef } from 'react';\nimport { timing } from '../utils';\n\nexport type AnimationType = {\n  value: number;\n  duration?: number;\n  startValue?: number;\n  enabled: boolean;\n  direction?: 'both' | 'reverse' | 'forward';\n  iterationCount?: number | 'infinite';\n  easing?: 'linear';\n};\n\nconst MAX_ANIMATION_PROGRESS = 1;\nconst MAX_LOOP_ANIMATION_PROGRESS = 2;\n\nexport const useCounterAnimation = ({\n  value,\n  duration = 1000,\n  startValue = 0,\n  enabled = false,\n  direction = 'forward',\n  iterationCount = 1,\n  easing = 'linear',\n}: AnimationType) => {\n  const [counterValue, setCounterValue] = useState(startValue);\n  const iteration = useRef(0);\n\n  const runAnimation = useCallback(() => {\n    iteration.current += 1;\n\n    return new Promise((resolve) => {\n      let startTime = 0;\n      const nextIterationDurationGap = duration / 5;\n      const step = (currentTime: number) => {\n        if (!startTime) {\n          startTime = currentTime;\n        }\n\n        //calculate the value to be used in calculating the number to be displayed\n        const progress = timing(\n          Math.min(\n            (currentTime - startTime) / duration,\n            direction === 'both'\n              ? MAX_LOOP_ANIMATION_PROGRESS\n              : MAX_ANIMATION_PROGRESS\n          ),\n          easing\n        );\n        function getNewValue(animationDir: AnimationType['direction']) {\n          if (animationDir === 'reverse') {\n            return (1 - progress) * (value - counterValue) + counterValue;\n          } else if (progress > 1 && animationDir === 'both') {\n            return (\n              (MAX_LOOP_ANIMATION_PROGRESS - progress) *\n                (value - counterValue) +\n              counterValue\n            );\n          } else {\n            return progress * (value - counterValue) + counterValue;\n          }\n        }\n        const newValue = getNewValue(direction);\n\n        //calculate what to be displayed using the value gotten above\n        setCounterValue(Math.floor(newValue));\n\n        if (\n          progress < MAX_ANIMATION_PROGRESS ||\n          (direction === 'both' && progress < MAX_LOOP_ANIMATION_PROGRESS)\n        ) {\n          window.requestAnimationFrame(step); //continue animation\n        } else {\n          window.cancelAnimationFrame(window.requestAnimationFrame(step));\n          resolve(true); //complete animation\n        }\n      };\n\n      // First loop of animation, take no delay\n      function runFirstIteration() {\n        window.requestAnimationFrame(step);\n      }\n\n      // For second loop for animation, take some pause before starting\n      function runNextIteration() {\n        setTimeout(() => {\n          window.requestAnimationFrame(step);\n        }, nextIterationDurationGap);\n      }\n      // start animation\n      (function startAnimation() {\n        iteration.current > 1 ? runNextIteration() : runFirstIteration();\n      })();\n    });\n  }, [value]);\n\n  useEffect(() => {\n    if (enabled) {\n      let animation = runAnimation();\n      const restartAnimation = () => {\n        animation.then(() => {\n          if (iterationCount === 'infinite') {\n            animation = runAnimation();\n            restartAnimation();\n            return;\n          }\n          if (iteration.current < iterationCount) {\n            animation = runAnimation();\n            restartAnimation();\n            return;\n          }\n        });\n      };\n      restartAnimation();\n    }\n  }, [enabled, iterationCount, value]);\n\n  return enabled ? counterValue : value;\n};\n","import { useEffect, useState } from 'react';\n\nexport function useClipPathHash() {\n  const [hash, setHash] = useState<string>('');\n  useEffect(() => {\n    setHash((Math.random() + 1).toString(36).substring(7));\n  }, []);\n  return hash;\n}\n","import React, { ReactElement } from 'react';\nimport { BATTERY_BODY, CHARGING_FLASH } from '../constants';\nimport { useCounterAnimation } from '../hooks/useCounterAnimation';\nimport { useGaugeContext } from '../hooks/useGaugeContext';\nimport { useLevelDimensions } from '../hooks/useLevelDimensions';\n\ninterface Props extends React.SVGProps<SVGPathElement> {\n  scale?: number;\n}\n// As per icon path\nconst iconWidth = 16.8; // As per path\nconst iconHeight = 28.7;\n\nexport default function Charging({ scale, ...pathProps }: Props): ReactElement {\n  const {\n    canvasWidth,\n    canvasHeight,\n    orientation,\n    customization,\n  } = useGaugeContext();\n  const { strokeWidth } = customization[BATTERY_BODY];\n  const { fill, animated, animationDuration  } = customization[CHARGING_FLASH];\n  const animatedOpacityPer = useCounterAnimation({\n    value: 100,\n    enabled: animated,\n    direction: 'both',\n    iterationCount: 'infinite',\n    duration: animationDuration,\n    startValue: 20,\n  });\n\n  const { width } = useLevelDimensions();\n  const iconXPos = width / 2 + iconWidth / 2;\n  const iconYPos = canvasHeight / 2 - iconHeight / 2;\n  const transformScale = scale ? `scale(${scale})` : '';\n  return (\n    <g\n      transform={\n        orientation === 'vertical'\n          ? `rotate(${-90})${transformScale}`\n          : transformScale\n      }\n      style={{\n        transformOrigin: `${canvasWidth / 2 - strokeWidth}px ${\n          canvasHeight / 2 - strokeWidth / 2\n        }px`,\n      }}\n      opacity={animatedOpacityPer / 100}\n    >\n      <path\n        d={`M${iconXPos},${iconYPos}l-13,16.8l7.4,0l-1.8,11.9l11.2,-16.8l-7.4,0l3.6,-11.9z`}\n        fill={fill}\n        {...pathProps}\n      />\n    </g>\n  );\n}\n","import React, { FC } from 'react';\nimport {\n  BATTERY_BODY,\n  BATTERY_CAP,\n  BATTERY_METER,\n  CANVAS_WIDTH,\n  CHARGING_FLASH,\n  READING_TEXT,\n} from './lib/constants';\nimport { Battery } from './lib/components/Battery';\nimport { Canvas } from './lib/Canvas';\nimport { BatteryLevel } from './lib/components/BatteryLevel';\nimport type {\n  DeepPartial,\n  FormatValue,\n  TGaugeCanvas,\n  TGaugeCustom,\n} from './typings';\nimport { defaultState } from './lib/store/context';\nimport { ReadingText } from './lib/components/ReadingText';\nimport { useCounterAnimation } from './lib/hooks/useCounterAnimation';\nimport { useClipPathHash } from './lib/hooks/useClipPathHash';\nimport Charging from './lib/components/Charging';\n\nexport interface Props\n  extends Omit<React.SVGProps<SVGSVGElement>, 'orientation'> {\n  /**\n   * Meter value range [0-100]\n   */\n  value: TGaugeCanvas['value'];\n  /**\n   * Meter max value\n   */\n  maxValue?: TGaugeCanvas['maxValue'];\n  /**\n   * Changes orientation, keeping text horizontal\n   */\n  orientation?: TGaugeCanvas['orientation'];\n\n  /**\n   * We don't like passing both width and height, can create unusual looking shape.\n   * Size will help gauge to achieve the desired size maintaining aspect ratio\n   */\n  size?: number;\n  /**\n   * Gauge aspect ratio,\n   * At padding 0 easy to create battery types ->\n   * D = 0.56,\n   * C = 0.52,\n   * AA = 0.28,\n   * AAA = 0.23,\n   * AAAA = 0.19 ,\n   * default C battery\n   */\n  aspectRatio?: number;\n  /**\n   * Padding of gauge within canvas\n   */\n  padding?: TGaugeCanvas['padding'];\n  /**\n   * Enable animation on mount\n   */\n  animated?: boolean;\n  /**\n   * Battery is charging\n   */\n  charging?: boolean;\n  /**\n   * Format the visible reading text as per your need\n   * Note: you can turn off percentage symbol from customizations\n   */\n  formatValue?: FormatValue;\n  /**\n   * All components customization\n   */\n  customization?: DeepPartial<TGaugeCustom>;\n}\n\nexport const BatteryGauge: FC<Props> = ({\n  size = 300,\n  aspectRatio = defaultState.aspectRatio,\n  children,\n  padding = defaultState.padding,\n  value = defaultState.value,\n  maxValue = defaultState.maxValue,\n  customization = defaultState.customization,\n  orientation = defaultState.orientation,\n  animated = defaultState.animated,\n  charging = defaultState.charging,\n  formatValue = (value) => value,\n  ...restSvgProps\n}) => {\n  const canvasHeight = Math.round(CANVAS_WIDTH * aspectRatio);\n  const height = Math.round(size * aspectRatio);\n  const clipPathHash = useClipPathHash();\n  const noLowBatteryColor = charging\n    ? {\n        lowBatteryFill:\n          customization[BATTERY_METER]?.fill ||\n          defaultState.customization[BATTERY_METER].fill,\n      }\n    : {};\n\n  const allCustomization: TGaugeCustom = {\n    [BATTERY_BODY]: {\n      ...defaultState.customization[BATTERY_BODY],\n      ...customization[BATTERY_BODY],\n    },\n    [BATTERY_CAP]: {\n      ...defaultState.customization[BATTERY_CAP],\n      ...customization[BATTERY_CAP],\n    },\n    [BATTERY_METER]: {\n      ...defaultState.customization[BATTERY_METER],\n      ...customization[BATTERY_METER],\n      ...noLowBatteryColor,\n    },\n    [READING_TEXT]: {\n      ...defaultState.customization[READING_TEXT],\n      ...customization[READING_TEXT],\n    },\n    [CHARGING_FLASH]: {\n      ...defaultState.customization[CHARGING_FLASH],\n      ...customization[CHARGING_FLASH],\n    },\n  };\n  const canvasPadding = allCustomization.batteryBody.strokeWidth / 2 + padding;\n  const newValue = useCounterAnimation({\n    value: value,\n    enabled: animated,\n  });\n  const chargingValue = useCounterAnimation({\n    startValue: 1,\n    value: maxValue,\n    enabled: charging,\n    iterationCount: 'infinite',\n    duration: 2000,\n  });\n  return (\n    <Canvas\n      width={size}\n      height={orientation === 'vertical' ? size : height}\n      canvasWidth={CANVAS_WIDTH}\n      canvasHeight={canvasHeight}\n      padding={canvasPadding}\n      value={charging ? chargingValue : newValue}\n      maxValue={!maxValue ? 1 : maxValue}\n      orientation={orientation}\n      customization={allCustomization}\n      clipPathHash={clipPathHash}\n      {...restSvgProps}\n    >\n      <g\n        transform={\n          orientation === 'vertical'\n            ? `rotate(-90,${CANVAS_WIDTH / 2},${canvasHeight / 2})` // rotate at right top corner\n            : ''\n        }\n      >\n        <Battery />\n        <BatteryLevel />\n        {charging ? <Charging /> : <ReadingText formatValue={formatValue} />}\n        {children}\n      </g>\n    </Canvas>\n  );\n};\n\nexport default BatteryGauge;\n"],"names":["CANVAS_WIDTH","CANVAS_HEIGHT","BATTERY_ASPECT_RATIO","BATTERY_BODY","BATTERY_CAP","BATTERY_METER","READING_TEXT","CHARGING_FLASH","CLIP_METER","CLIP_METER_FILLED","CLIP_METER_EMPTY","CLIP_CAP","defaultState","canvasWidth","canvasHeight","aspectRatio","padding","value","maxValue","clipPathHash","orientation","animated","charging","customization","batteryBody","strokeWidth","cornerRadius","fill","strokeColor","batteryCap","capToBodyRatio","batteryMeter","lowBatteryValue","lowBatteryFill","outerGap","noOfCells","interCellsGap","readingText","lightContrastColor","darkContrastColor","lowBatteryColor","fontFamily","fontSize","showPercentage","chargingFlash","scale","undefined","animationDuration","Context","createContext","useGaugeContext","useContext","useBatteryDimensions","batteryCapRatio","objectHeight","capHeight","capWidth","bodyWidth","bodyHeight","Battery","bodyStrokeColor","bodyStrokeWidth","bodyFill","bodyCornerRadius","capStrokeColor","capStrokeWidth","capFill","capCornerRadius","React","id","x","y","width","height","className","rx","ry","stroke","clipPath","CanvasProvider","children","Provider","Canvas","props","otherSvgProps","viewBox","useLevelDimensions","useMemo","innerBodyWidth","innerBodyHeight","getValueInPercentage","Math","round","checkLowBattery","getVisibleCellsCount","floor","abs","timing","progress","easing","BatteryLevel","gradFill","cellList","noOfVisibleCells","Array","map","item","key","color","offset","stopColor","_item","index","ReadingText","formatValue","otherTextProps","percentageSign","valueRatio","isCellTypeBattery","noOfInvisibleCells","widthPerCell","readingValue","renderTextElement","contrastColor","clipPathId","dominantBaseline","textAnchor","fontWeight","writingMode","MAX_ANIMATION_PROGRESS","MAX_LOOP_ANIMATION_PROGRESS","useCounterAnimation","duration","startValue","enabled","direction","iterationCount","useState","counterValue","setCounterValue","iteration","useRef","runAnimation","useCallback","current","Promise","resolve","startTime","nextIterationDurationGap","step","currentTime","min","getNewValue","animationDir","newValue","window","requestAnimationFrame","cancelAnimationFrame","runFirstIteration","runNextIteration","setTimeout","startAnimation","useEffect","animation","restartAnimation","then","useClipPathHash","hash","setHash","random","toString","substring","iconWidth","iconHeight","Charging","pathProps","animatedOpacityPer","iconXPos","iconYPos","transformScale","transform","style","transformOrigin","opacity","d","BatteryGauge","size","restSvgProps","noLowBatteryColor","allCustomization","canvasPadding","chargingValue"],"mappings":"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"}